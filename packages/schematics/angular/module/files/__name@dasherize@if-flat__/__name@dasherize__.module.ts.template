import { NgModule } from '@angular/core';<% if (commonModule) { %>
import { CommonModule } from '@angular/common';<% } %><% if (lazyRoute && routeDeclarationInlined) { %>
import { Routes, RouterModule } from '@angular/router';<% } %>
<% if (routing || lazyRoute) { %>
import { <%= classify(name) %>RoutingModule } from './<%= dasherize(name) %>-routing.module';<% } %><% if (lazyRoute) { %>
import { <%= classify(name) %>Component } from './<%= dasherize(name) %>.component.ts';<% } %>
<% if (lazyRoute && routeDeclarationInlined) { %>
const routes: Routes = [
  { path: '', component: <%= classify(name) %>Component }
];<% } %>

@NgModule({
  declarations: [<% if (lazyRoute) { %><%= classify(name) %>Component<% } %>],
  imports: [<% if (commonModule) { %>
    CommonModule<%= routing || lazyRoute ? ',' : '' %><% } %><% if (routing || lazyRoute) { %>
    <%= classify(name) %>RoutingModule<% } %><%= lazyRoute && routeDeclarationInlined ? ',' : '' %><% if (lazyRoute && routeDeclarationInlined) { %>
    RouterModule.forChild(routes)<% } %>
  ]
})
export class <%= classify(name) %>Module { }
